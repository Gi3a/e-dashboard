import type { PrimitiveProps } from '../Primitive';
import type { Direction } from '../shared/types';
import { type Ref } from 'vue';
export interface TagsInputRootProps extends PrimitiveProps {
    modelValue?: Array<string>;
    defaultValue?: Array<string>;
    addOnPaste?: boolean;
    duplicate?: boolean;
    disabled?: boolean;
    delimiter?: string;
    dir?: Direction;
    max?: number;
    required?: boolean;
    name?: string;
    id?: string;
}
export type TagsInputRootEmits = {
    'update:modelValue': [payload: Array<string>];
    'invalid': [payload: string];
};
export interface TagsInputRootContext {
    modelValue: Ref<Array<string>>;
    onAddValue: (payload: string) => boolean;
    onRemoveValue: (index: number) => void;
    onInputKeydown: (event: KeyboardEvent) => void;
    selectedElement: Ref<HTMLElement | undefined>;
    isInvalidInput: Ref<boolean>;
    addOnPaste: Ref<boolean>;
    disabled: Ref<boolean>;
    delimiter: Ref<string>;
    dir: Ref<Direction>;
    max: Ref<number>;
    id: Ref<string | undefined> | undefined;
}
export declare const injectTagsInputRootContext: <T extends TagsInputRootContext | null | undefined = TagsInputRootContext>(fallback?: T | undefined) => T extends null ? TagsInputRootContext | null : TagsInputRootContext, provideTagsInputRootContext: (contextValue: TagsInputRootContext) => TagsInputRootContext;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TagsInputRootProps>, {
    defaultValue: () => never[];
    delimiter: string;
    max: number;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    invalid: (payload: string) => void;
    "update:modelValue": (payload: string[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TagsInputRootProps>, {
    defaultValue: () => never[];
    delimiter: string;
    max: number;
}>>> & {
    onInvalid?: ((payload: string) => any) | undefined;
    "onUpdate:modelValue"?: ((payload: string[]) => any) | undefined;
}, {
    defaultValue: string[];
    max: number;
    delimiter: string;
}, {}>, {
    default?(_: {
        values: string[];
    }): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
