import type { Ref } from 'vue';
import type { PrimitiveProps } from '../Primitive';
interface SelectItemContext {
    value: string;
    textId: string;
    disabled: Ref<boolean>;
    isSelected: Ref<boolean>;
    onItemTextChange(node: HTMLElement | undefined): void;
}
export declare const injectSelectItemContext: <T extends SelectItemContext | null | undefined = SelectItemContext>(fallback?: T | undefined) => T extends null ? SelectItemContext | null : SelectItemContext, provideSelectItemContext: (contextValue: SelectItemContext) => SelectItemContext;
export interface SelectItemProps extends PrimitiveProps {
    value: string;
    disabled?: boolean;
    textValue?: string;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<SelectItemProps>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<SelectItemProps>>>, {}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
