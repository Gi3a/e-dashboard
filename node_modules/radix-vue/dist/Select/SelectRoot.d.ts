import type { Ref, VNode } from 'vue';
import type { DataOrientation, Direction } from '../shared/types';
export interface SelectRootProps {
    open?: boolean;
    defaultOpen?: boolean;
    defaultValue?: string;
    modelValue?: string;
    orientation?: DataOrientation;
    dir?: Direction;
    name?: string;
    autocomplete?: string;
    disabled?: boolean;
    required?: boolean;
}
export type SelectRootEmits = {
    'update:modelValue': [value: string];
    'update:open': [value: boolean];
};
export interface SelectRootContext {
    triggerElement: Ref<HTMLElement | undefined>;
    onTriggerChange(node: HTMLElement | undefined): void;
    valueElement: Ref<HTMLElement | undefined>;
    onValueElementChange(node: HTMLElement): void;
    valueElementHasChildren: Ref<boolean>;
    onValueElementHasChildrenChange(hasChildren: boolean): void;
    contentId: string;
    modelValue?: Ref<string>;
    onValueChange(value: string): void;
    open: Ref<boolean>;
    required?: Ref<boolean>;
    onOpenChange(open: boolean): void;
    dir: Ref<Direction>;
    triggerPointerDownPosRef: Ref<{
        x: number;
        y: number;
    } | null>;
    disabled?: Ref<boolean>;
}
export declare const injectSelectRootContext: <T extends SelectRootContext | null | undefined = SelectRootContext>(fallback?: T | undefined) => T extends null ? SelectRootContext | null : SelectRootContext, provideSelectRootContext: (contextValue: SelectRootContext) => SelectRootContext;
export interface SelectNativeOptionsContext {
    onNativeOptionAdd(option: VNode): void;
    onNativeOptionRemove(option: VNode): void;
}
export declare const injectSelectNativeOptionsContext: <T extends SelectNativeOptionsContext | null | undefined = SelectNativeOptionsContext>(fallback?: T | undefined) => T extends null ? SelectNativeOptionsContext | null : SelectNativeOptionsContext, provideSelectNativeOptionsContext: (contextValue: SelectNativeOptionsContext) => SelectNativeOptionsContext;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<SelectRootProps>, {
    orientation: string;
    defaultValue: string;
    modelValue: undefined;
    open: undefined;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:open": (value: boolean) => void;
    "update:modelValue": (value: string) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<SelectRootProps>, {
    orientation: string;
    defaultValue: string;
    modelValue: undefined;
    open: undefined;
}>>> & {
    "onUpdate:open"?: ((value: boolean) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
}, {
    open: boolean;
    defaultValue: string;
    modelValue: string;
    orientation: DataOrientation;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
