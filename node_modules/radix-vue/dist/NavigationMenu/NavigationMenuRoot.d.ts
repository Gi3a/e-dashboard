import type { Ref } from 'vue';
import type { PrimitiveProps } from '../Primitive';
import type { Direction, Orientation } from './utils';
export interface NavigationMenuRootProps extends PrimitiveProps {
    modelValue?: string;
    defaultValue?: string;
    dir?: Direction;
    orientation?: Orientation;
    /**
     * The duration from when the pointer enters the trigger until the tooltip gets opened.
     * @defaultValue 200
     */
    delayDuration?: number;
    /**
     * How much time a user has to enter another trigger without incurring a delay again.
     * @defaultValue 300
     */
    skipDelayDuration?: number;
}
export type NavigationMenuRootEmits = {
    'update:modelValue': [value: string];
};
export interface NavigationMenuContext {
    isRootMenu: boolean;
    modelValue: Ref<string>;
    previousValue: Ref<string>;
    baseId: string;
    dir: Ref<Direction>;
    orientation: Orientation;
    rootNavigationMenu: Ref<HTMLElement | undefined>;
    indicatorTrack: Ref<HTMLElement | undefined>;
    onIndicatorTrackChange(indicatorTrack: HTMLElement | undefined): void;
    viewport: Ref<HTMLElement | undefined>;
    onViewportChange(viewport: HTMLElement | undefined): void;
    onTriggerEnter(itemValue: string): void;
    onTriggerLeave(): void;
    onContentEnter(itemValue: string): void;
    onContentLeave(): void;
    onItemSelect(itemValue: string): void;
    onItemDismiss(): void;
}
export declare const injectNavigationMenuContext: <T extends NavigationMenuContext | null | undefined = NavigationMenuContext>(fallback?: T | undefined) => T extends null ? NavigationMenuContext | null : NavigationMenuContext, provideNavigationMenuContext: (contextValue: NavigationMenuContext) => NavigationMenuContext;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<NavigationMenuRootProps>, {
    modelValue: undefined;
    delayDuration: number;
    skipDelayDuration: number;
    orientation: string;
    as: string;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<NavigationMenuRootProps>, {
    modelValue: undefined;
    delayDuration: number;
    skipDelayDuration: number;
    orientation: string;
    as: string;
}>>> & {
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
}, {
    as: import('../Primitive').AsTag | import("vue").Component;
    modelValue: string;
    orientation: Orientation;
    delayDuration: number;
    skipDelayDuration: number;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
